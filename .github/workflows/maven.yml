# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    permissions: write-all
    name: build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    - name: ServiceNow Register Artifact
      uses: ServiceNow/servicenow-devops-register-artifact@v2.0.0
      with:
        devops-integration-token: ${{ secrets.SN_DEVOPS_INTEGRATION_TOKEN }}
        instance-url: ${{ secrets.SN_INSTANCE_URL }}
        tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
        context-github: ${{ toJSON(github) }}
        job-name: 'build'
        artifacts: '[{"name": "com.maven.app","version": "1.${{ github.run_number }}","semanticVersion": "1.0.${{ github.run_number }}","repositoryName": "${{ github.repository }}"}]'
    - name: Unit Tests
      run: mvn test
    - name: Show tests
      run: less target/surefire-reports/TEST-com.mycompany.app.AppTest.xml
    #- name: ServiceNow DevOps Unit Test Results
    #  uses: ServiceNow/servicenow-devops-test-report@v2.0.0
    #  with:
    #    devops-integration-token: ${{ secrets.SN_DEVOPS_INTEGRATION_TOKEN }}
    #    instance-url: ${{ secrets.SN_INSTANCE_URL }}
    #    tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
    #    context-github: ${{ toJSON(github) }}
    #    job-name: 'Build'
    #    xml-report-filename: target/surefire-reports/TEST-com.mycompany.app.AppTest.xml
    - name: Run SonarQube Analysis
      env: 
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
    - name: ServiceNow DevOps Sonar Scan Results
      uses: ServiceNow/servicenow-devops-sonar@v2.0.0
      with:
        devops-integration-token: ${{ secrets.SN_DEVOPS_INTEGRATION_TOKEN}}
        instance-url: ${{ secrets.SN_INSTANCE_URL }}
        tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
        context-github: ${{ toJSON(github) }}
        job-name: 'build'
        sonar-host-url: ${{ secrets.SONAR_HOST_URL }}
        sonar-project-key: ${{ secrets.SONAR_PROJECT_KEY }}

  prepare-uat-deployment:
    name: Prepare-UAT-Deployment
    needs: build
    runs-on: ubuntu-latest
    steps: 
    - name: ServiceNow Register Package
      uses: ServiceNow/servicenow-devops-register-package@v2.0.0
      with:
        devops-integration-token: ${{ secrets.SN_DEVOPS_INTEGRATION_TOKEN }}
        instance-url: ${{ secrets.SN_INSTANCE_URL }}
        tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
        context-github: ${{ toJSON(github) }}
        job-name: 'Prepare-PROD-Deployment'
        artifacts: '[{"name": "com.maven.app","version": "1.${{ github.run_number }}","semanticVersion": "1.0.${{ github.run_number }}","repositoryName": "${{ github.repository }}"}]'
        package-name: 'maven-app.war'
    - name: ServiceNow Change
      uses: ServiceNow/servicenow-devops-change@v2.0.0
      with:
        devops-integration-token: ${{ secrets.SN_DEVOPS_INTEGRATION_TOKEN }}
        instance-url: ${{ secrets.SN_INSTANCE_URL }}
        tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
        context-github: ${{ toJSON(github) }}
        job-name: 'Prepare-UAT-Deployment'
        change-request: '{"setCloseCode":"true","attributes":{"short_description":"Automated Software Deployment","description":"Automated Software Deployment.","implementation_plan":"Software update is tested and results can be found in Test Summaries Tab; When the change is approved the implementation happens automated by the CICD pipeline within the change planned start and end time window.","backout_plan":"When software fails in production, the previous software release will be re-deployed.","test_plan":"Testing if the software was successfully deployed"}}'
        interval: '30'
        timeout: '3600'
        changeCreationTimeOut: '3600'
        abortOnChangeCreationFailure: true
        abortOnChangeStepTimeout: true
        deployment-gate: '{"environment":"UAT","jobName":"Deployment UAT"}'
            
  deployment_uat:
    name: Deployment UAT
    runs-on: ubuntu-latest
    needs: prepare-uat-deployment
    environment: UAT
    steps:
      - name: deploy
        run: echo "deployment to UAT"


  post_implementation_uat:
    name: Post Implementation UAT
    runs-on: ubuntu-latest
    needs: deployment_uat
    steps:
      - name: ServiceNow Get Change
        uses: ServiceNow/servicenow-devops-get-change@v2.0.0
        with:
          devops-integration-token: ${{ secrets.SN_DEVOPS_INTEGRATION_TOKEN }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          job-name: 'Post Implementation'
          change-details: '{"build_number":"","pipeline_name":"","stage_name":"Prepare-UAT-Deployment"}'
      - name: Servicenow Update Change Details
        uses: ServiceNow/servicenow-devops-update-change@v2.0
        id: update
        with:
          change-request-number: '${{needs.custom_action_get_change.outputs.changeRequestNumber}}'
          devops-integration-token: ${{ secrets.SN_DEVOPS_INTEGRATION_TOKEN }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          context-github: ${{ toJSON(github) }}
          change-request-details: '{"state":"3","close_code":"successful", "close_notes":"Deployment to PROD was successful"}'
          
  prepare-prod-deployment:
      name: Prepare-PROD-Deployment
      needs: post_implementation_uat
      runs-on: ubuntu-latest
      steps: 
      - name: ServiceNow Register Package
        uses: ServiceNow/servicenow-devops-register-package@v2.0.0
        with:
          devops-integration-token: ${{ secrets.SN_DEVOPS_INTEGRATION_TOKEN }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          job-name: 'Prepare-PROD-Deployment'
          artifacts: '[{"name": "com.maven.app","version": "1.${{ github.run_number }}","semanticVersion": "1.0.${{ github.run_number }}","repositoryName": "${{ github.repository }}"}]'
          package-name: 'maven-app.war'
      - name: ServiceNow Change
        uses: ServiceNow/servicenow-devops-change@v2.0.0
        with:
          devops-integration-token: ${{ secrets.SN_DEVOPS_INTEGRATION_TOKEN }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          job-name: 'Prepare-PROD-Deployment'
          change-request: '{"setCloseCode":"true","attributes":{"short_description":"Automated Software Deployment","description":"Automated Software Deployment.","implementation_plan":"Software update is tested and results can be found in Test Summaries Tab; When the change is approved the implementation happens automated by the CICD pipeline within the change planned start and end time window.","backout_plan":"When software fails in production, the previous software release will be re-deployed.","test_plan":"Testing if the software was successfully deployed"}}'
          interval: '30'
          timeout: '3600'
          changeCreationTimeOut: '3600'
          abortOnChangeCreationFailure: true
          abortOnChangeStepTimeout: true
          deployment-gate: '{"environment":"PROD","jobName":"Deployment Production"}'

  deployment_production:
    name: Deployment Production
    runs-on: ubuntu-latest
    needs: prepare-prod-deployment
    environment: PROD
    steps:
      - name: deploy
        run: echo "deployment to PROD"

#  post_implementation_prod:
#    name: Post Implementation PROD
#    runs-on: ubuntu-latest
#    needs: deployment_production
#    steps:
#      - name: ServiceNow Get Change
#        uses: ServiceNow/servicenow-devops-get-change@v2.0.0
#        with:
#          devops-integration-token: ${{ secrets.SN_DEVOPS_INTEGRATION_TOKEN }}
#          instance-url: ${{ secrets.SN_INSTANCE_URL }}
#          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
#          context-github: ${{ toJSON(github) }}
#          job-name: 'Post Implementation PROD'
#          change-details: '{"build_number":"","pipeline_name":"","stage_name":"Prepare-PROD-Deployment"}'
#      - name: Servicenow Update Change Details
#        uses: ServiceNow/servicenow-devops-update-change@v2.0
#        id: update
#        with:
#          change-request-number: 'CHG0030004'
#          devops-integration-token: ${{ secrets.SN_DEVOPS_INTEGRATION_TOKEN }}
#          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
#          instance-url: ${{ secrets.SN_INSTANCE_URL }}
#          context-github: ${{ toJSON(github) }}
#          change-request-details: '{"state":"3","close_code":"successful", "close_notes":"Deployment to PROD was successful"}'
